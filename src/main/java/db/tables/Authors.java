/*
 * This file is generated by jOOQ.
 */
package db.tables;


import db.Public;
import db.tables.records.AuthorsRecord;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Authors extends TableImpl<AuthorsRecord> {

    private static final long serialVersionUID = -1327856789;

    /**
     * The reference instance of <code>public.AUTHORS</code>
     */
    public static final Authors AUTHORS = new Authors();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AuthorsRecord> getRecordType() {
        return AuthorsRecord.class;
    }

    /**
     * The column <code>public.AUTHORS.ID</code>.
     */
    public final TableField<AuthorsRecord, Integer> ID = createField("ID", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.AUTHORS.FIRSNAME</code>.
     */
    public final TableField<AuthorsRecord, String> FIRSNAME = createField("FIRSNAME", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.AUTHORS.SECONDNAME</code>.
     */
    public final TableField<AuthorsRecord, String> SECONDNAME = createField("SECONDNAME", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * Create a <code>public.AUTHORS</code> table reference
     */
    public Authors() {
        this(DSL.name("AUTHORS"), null);
    }

    /**
     * Create an aliased <code>public.AUTHORS</code> table reference
     */
    public Authors(String alias) {
        this(DSL.name(alias), AUTHORS);
    }

    /**
     * Create an aliased <code>public.AUTHORS</code> table reference
     */
    public Authors(Name alias) {
        this(alias, AUTHORS);
    }

    private Authors(Name alias, Table<AuthorsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Authors(Name alias, Table<AuthorsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Authors(Table<O> child, ForeignKey<O, AuthorsRecord> key) {
        super(child, key, AUTHORS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Authors as(String alias) {
        return new Authors(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Authors as(Name alias) {
        return new Authors(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Authors rename(String name) {
        return new Authors(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Authors rename(Name name) {
        return new Authors(name, null);
    }
}
